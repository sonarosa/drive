import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the images to be aligned
img1 = cv2.imread("image1.png", cv2.IMREAD_GRAYSCALE)  # Reference image
img2 = cv2.imread("image2.png", cv2.IMREAD_GRAYSCALE)  # Image to align

# Step 1: Detect keypoints and descriptors using SIFT
sift = cv2.SIFT_create()
keypoints1, descriptors1 = sift.detectAndCompute(img1, None)
keypoints2, descriptors2 = sift.detectAndCompute(img2, None)

# Step 2: Match features using FLANN-based matcher
FLANN_INDEX_KDTREE = 1
index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
search_params = dict(checks=50)

flann = cv2.FlannBasedMatcher(index_params, search_params)
matches = flann.knnMatch(descriptors1, descriptors2, k=2)

# Apply ratio test to filter matches
good_matches = []
for m, n in matches:
    if m.distance < 0.7 * n.distance:
        good_matches.append(m)

# Step 3: Extract location of good matches
points1 = np.float32([keypoints1[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
points2 = np.float32([keypoints2[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)

# Step 4: Compute homography matrix using RANSAC
H, mask = cv2.findHomography(points2, points1, cv2.RANSAC, 5.0)

# Step 5: Warp the second image to align with the first
height, width = img1.shape
aligned_img = cv2.warpPerspective(img2, H, (width, height))

# Display the results
plt.figure(figsize=(10, 5))
plt.subplot(1, 3, 1)
plt.title("Reference Image")
plt.imshow(img1, cmap='gray')

plt.subplot(1, 3, 2)
plt.title("Image to Align")
plt.imshow(img2, cmap='gray')

plt.subplot(1, 3, 3)
plt.title("Aligned Image")
plt.imshow(aligned_img, cmap='gray')
plt.show()

# Save the aligned image
cv2.imwrite("aligned_image.jpg", aligned_img)
