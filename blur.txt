import numpy as np

# Define a simple 3x3 image
image = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

# Define a 3x3 kernel
kernel = np.array([
    [1, 0, -1],
    [1, 0, -1],
    [1, 0, -1]
])

# Add zero padding around the image
padding_size = 1  # To keep output size the same as the input
padded_image = np.pad(image, pad_width=padding_size, mode='constant', constant_values=0)

# Output matrix initialization (same size as input image)
output = np.zeros_like(image)

# Perform convolution
for i in range(output.shape[0]):  # Rows
    for j in range(output.shape[1]):  # Columns
        # Extract the region of interest (matching the kernel size)
        region = padded_image[i:i+3, j:j+3]
        # Element-wise multiplication and sum
        output[i, j] = np.sum(region * kernel)

print("Original Image:\n", image)
print("Padded Image:\n", padded_image)
print("Kernel:\n", kernel)
print("Output Image:\n", output)

# Importing the modules
import cv2
import numpy as np

# Reading the image
image = cv2.imread('lena.jpeg')

# Creating the kernel with numpy
kernel2 = np.ones((5, 5), np.float32)/25

# Applying the filter
img = cv2.filter2D(src=image, ddepth=-1, kernel=kernel2)

# showing the image
cv2_imshow( image)
cv2_imshow( img)

cv2.waitKey()
cv2.destroyAllWindows()

# Importing the modules
import cv2
import numpy as np

# Reading the image
image = cv2.imread('lena.jpeg')

# Applying the filter
averageBlur = cv2.blur(image, (5, 5))

# Showing the image
cv2_imshow(image)
cv2_imshow(averageBlur)

cv2.waitKey()
cv2.destroyAllWindows()
#gaussian blur

from google.colab.patches import cv2_imshow
# Importing the module
import cv2
import numpy as np

# Reading the image
image = cv2.imread('/content/lena.jpeg')

# Applying the filter
gaussian = cv2.GaussianBlur(image, (3, 3), 0)

# Showing the image
cv2_imshow(image)
cv2_imshow(gaussian)

cv2.waitKey()
cv2.destroyAllWindows()
